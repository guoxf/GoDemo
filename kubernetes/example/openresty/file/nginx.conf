worker_processes 1;
error_log logs/error.log debug;
events{
    worker_connections 1024;
}

http{
    upstream zeppelin.plu.cn{
        server zeppelin.spark-cluster:8080;
    }
    upstream spark-webui.plu.cn{
        server spark-webui.spark-cluster:8080;
    }
    upstream elasticsearch.plu.cn{
        server elasticsearch:9200;
    }
    upstream consul.plu.cn{
        server consul:8500;
    }

    server{
        listen 80;
        server_name zeppelin.plu.cn;
        location / {
            proxy_pass http://zeppelin.plu.cn;
        }
        location /ws{
            proxy_pass http://zeppelin.plu.cn;
            lua_socket_log_errors off;
            lua_check_client_abort on;
            content_by_lua '
                local server = require "resty.websocket.server"
                local wb, err = server:new{
                    timeout = 5000,  -- in milliseconds
                    max_payload_len = 65535,
                }
                if not wb then
                    ngx.log(ngx.ERR, "failed to new websocket: ", err)
                    return ngx.exit(444)
                end

                while true do
                    local data, typ, err = wb:recv_frame()
                    if wb.fatal then
                        ngx.log(ngx.ERR, "failed to receive frame: ", err)
                        return ngx.exit(444)
                    end
                    if not data then
                        local bytes, err = wb:send_ping()
                        if not bytes then
                        ngx.log(ngx.ERR, "failed to send ping: ", err)
                        return ngx.exit(444)
                        end
                    elseif typ == "close" then break
                    elseif typ == "ping" then
                        local bytes, err = wb:send_pong()
                        if not bytes then
                            ngx.log(ngx.ERR, "failed to send pong: ", err)
                            return ngx.exit(444)
                        end
                    elseif typ == "pong" then
                        ngx.log(ngx.INFO, "client ponged")
                    elseif typ == "text" then
                        local bytes, err = wb:send_text(data)
                        if not bytes then
                            ngx.log(ngx.ERR, "failed to send text: ", err)
                            return ngx.exit(444)
                        end
                    end
                end
                wb:send_close()
            ';
        }
    }
    server {
        listen 80;
        server_name spark-webui.plu.cn;
        location /{
            proxy_pass http://spark-webui.plu.cn;
        }
    }
    server {
        listen 80;
        server_name elasticsearch.plu.cn;
        location /{
            proxy_pass http://elasticsearch.plu.cn;
        }
    }
    server {
        listen 80;
        server_name consul.plu.cn;
        location /{
            proxy_pass http://consul.plu.cn;
        }
    }
}

stream {
    upstream redis.plu.cn{
            server redis-sentinel:26379;
    }
    server {
        listen     26379;
        #server_name redis.plu.cn;
        #TCP traffic will be proxied to the "stream_backend" upstream group
        proxy_pass redis.plu.cn;
    }
}